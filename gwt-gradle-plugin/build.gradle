import org.gradle.plugins.ide.eclipse.model.AbstractLibrary
import org.gradle.plugins.ide.eclipse.model.Classpath
import org.gradle.plugins.ide.eclipse.model.ClasspathEntry

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
  }
}

plugins {
  id 'java'
  id 'maven-publish'
  id 'signing'

  // For publishing the plugin to the Gradle Plugin Portal
  id 'java-gradle-plugin'
  id "com.gradle.plugin-publish" version "0.12.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories { mavenCentral() }

dependencies {
  implementation gradleApi()
  testImplementation group: 'junit', name: 'junit', version: '4.11'
}

// Change the output directory for the main source set back to the old path
sourceSets.main.java.outputDir = new File(buildDir, "classes/main")
sourceSets.test.java.outputDir = new File(buildDir, "classes/test")

rootProject.tasks.build.dependsOn project.tasks.build
rootProject.tasks.publish.dependsOn project.tasks.publish

pluginBundle {
  website = 'http://gwt-gradle-plugin.documentnode.io'
  vcsUrl = 'https://github.com/jiakuan/gwt-gradle-plugin'
  tags = ['gwt', 'gradle', 'gwt-gradle']
}

gradlePlugin {
  plugins {
    gwtGradlePlugin {
      id = 'org.wisepersist.gwt'
      displayName = 'GWT Gradle Plugin'
      description = 'Gradle plugin to support GWT related tasks.'
      implementationClass = 'org.wisepersist.gradle.plugins.gwt.GwtPlugin'
    }
  }
}

eclipse {
  classpath {
    file {
      whenMerged { Classpath cp ->
        String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
        String gradleSrc = "${gradleHome}/src"
        cp.entries.each { ClasspathEntry entry ->
          if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
            entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(gradleSrc)
          }
        }
      }
    }
  }
}

ext.userHome = System.getProperty("user.home")

javadoc {
  // Avoid error: cannot access external classes
  options.addStringOption("sourcepath", "")

  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

def ossrU = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
def ossrP = project.hasProperty("ossrhPassword") ? ossrhPassword : ""

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      pom {
        name = 'GWT Gradle Plugin'
        description = 'Gradle plugin to support GWT (http://www.gwtproject.org/) related tasks.'
        url = 'https://github.com/jiakuan/gwt-gradle-plugin/'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'jiakuan'
            name = 'Jiakuan Wang'
            email = 'jake@documentnode.io'
            organization = 'Document Node'
            organizationUrl = 'https://documentnode.io'
          }
        }

        scm {
          connection = 'scm:git:git@github.com:jiakuan/gwt-gradle-plugin.git'
          developerConnection = 'scm:git:git@github.com:jiakuan/gwt-gradle-plugin.git'
          url = 'git@github.com:jiakuan/gwt-gradle-plugin.git'
        }
      }
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = ossrU
        password = ossrP
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

task writeNewPom {
  doLast {
    pom {
      project {
        packaging 'jar'
        build {
          plugins {
            plugin {
              groupId 'org.apache.maven.plugins'
              artifactId 'maven-compiler-plugin'
              version '3.8.0'
              configuration {
                source '1.8'
                target '1.8'
                encoding 'UTF-8'
              }
            }
          }
        }
      }
    }.writeTo("$projectDir/pom.xml")
  }
}
